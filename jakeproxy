#!/usr/bin/python3
import socket
import signal
import sys
import argparse


DEFAULT_BUFFER_SIZE = 4096
DEFAULT_BACKLOG = 5
DEFAULT_TIMEOUT = 60
DEFAULT_KEEP_ALIVE_TIMEOUT = 30
LOG_PREFIX = "[jakeproxy]"
HOST = ''
PORT = 0
BACKEND_HOST = ''
BACKEND_PORT = 0
BUFFER_SIZE = DEFAULT_BUFFER_SIZE
BACKLOG = DEFAULT_BACKLOG
TIMEOUT = DEFAULT_TIMEOUT
KEEP_ALIVE_TIMEOUT = DEFAULT_KEEP_ALIVE_TIMEOUT
running = True

def log_message(message):
    print(f"{LOG_PREFIX} {message}")

def parse_host_port(host_port):
    try:
        host, port = host_port.split(':')
        return host, int(port)
    except ValueError:
        raise argparse.ArgumentTypeError(f"Invalid format for host:port: {host_port}")

def handle_client(client_socket):
    try:
        client_socket.settimeout(TIMEOUT)

        # Receive the client's request
        request = client_socket.recv(BUFFER_SIZE)
        if not request:
            return

        # create a connection to the backend server
        backend_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        backend_socket.connect((BACKEND_HOST, BACKEND_PORT))
        backend_socket.sendall(request)

        while True:
            try:
                response = backend_socket.recv(BUFFER_SIZE)
                if len(response) > 0:
                    client_socket.sendall(response)
                else:
                    # No more data, end of response
                    client_socket.shutdown(socket.SHUT_WR)
                    break
            except (BrokenPipeError, socket.error, socket.timeout):
                break

    except (BrokenPipeError, socket.error, socket.timeout):
        pass
    finally:
        try:
            backend_socket.close()
        except:
            pass
        try:
            client_socket.close()
        except:
            pass

def accept_connections(server_socket):
    global running
    while running:
        try:
            server_socket.settimeout(KEEP_ALIVE_TIMEOUT)
            client_socket, addr = server_socket.accept()
            log_message(f"Received connection from {addr[0]}:{addr[1]}")

            handle_client(client_socket)
        except socket.timeout:
            # Continue to accept connections
            pass
        except (socket.error, KeyboardInterrupt):
            if not running:
                break

def start_proxy():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(BACKLOG)
    log_message(f"Listening on {HOST}:{PORT}")

    accept_connections(server_socket)

def signal_handler(sig, frame):
    global running
    log_message("Shutting down gracefully...")
    running = False
    sys.exit(0)

if __name__ == "__main__":
    # Argument parser setup
    parser = argparse.ArgumentParser(description='Simple reverse proxy server.')
    parser.add_argument('proxy_address', type=parse_host_port, help='Host and port of the reverse proxy (format: host:port)')
    parser.add_argument('backend_address', type=parse_host_port, help='Host and port of the backend server (format: host:port)')

    parser.add_argument('-b', '--buffer-size', type=int, default=DEFAULT_BUFFER_SIZE, help='Size of the buffer for receiving data (in bytes)')
    parser.add_argument('-l', '--backlog', type=int, default=DEFAULT_BACKLOG, help='Maximum number of queued connections')
    parser.add_argument('-t', '--timeout', type=int, default=DEFAULT_TIMEOUT, help='Timeout for connection handling (in seconds)')
    parser.add_argument('-k', '--keep-alive-timeout', type=int, default=DEFAULT_KEEP_ALIVE_TIMEOUT, help='Timeout for idle connections (in seconds)')

    args = parser.parse_args()

    HOST, PORT = args.proxy_address
    BACKEND_HOST, BACKEND_PORT = args.backend_address
    BUFFER_SIZE = args.buffer_size
    BACKLOG = args.backlog
    TIMEOUT = args.timeout
    KEEP_ALIVE_TIMEOUT = args.keep_alive_timeout

    # Register signal handler for a graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)

    start_proxy()
